#include <iostream>
#include "Image.hpp"
#include <CMath>
#include <string>

Image::Image(int largeur, int hauteur) :
  _largeur(largeur), _hauteur(hauteur)
{}

int Image::getLargeur() const{
  return _largeur;
}

int Image::getHauteur() const{
  return _hauteur;
}

int Image::getPixel(int i, int j) const{
  return _pixels[largeur * i + j];
}

void Image::setPixel(int i, int j, int couleur){
  _pixels[_largeur * i + j] = couleur
}

Image::~Image(){
  delete[] _pixels;
}

void Image::remplir(Image & img){

  for(int i = 0; i < image.getHauteur(); i++){
    for(int j = 0; j < image.getLargeur(); j++){
      double cosVal = ((std::cos((float)j / 10) + 1)/2)*255;
      image.setPixel(i,j) = std::floor(cosVal);
    }
  }

}

void Image::ecrirePnm(const Image& img, const std::string& nomFichier){
    std::ofstream file(nomFichier, std::ofstream::out);
    if(!file){
        throw std::string("erreur : impossible d'Ã©crire le fichier");
    }
    
    const int largeur = img.getLargeur();
    const int hauteur = img.getHauteur();

    file << "P2" << std::endl;
    file << largeur << " " << hauteur << std::endl;
    file << "255" << std::endl;
    for(int i = 0; i < hauteur; i++){
        for(int j = 0; j < largeur; j++){
            file << img.pixel(i, j) << " ";           
        }
        file << std::endl;
    }
}

Image Image::bordure(const Image & img, int couleur, int epaisseur){

  Image imgB = 
  
}
